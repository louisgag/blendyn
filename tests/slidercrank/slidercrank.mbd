# $Header$
#
# MBDyn (C) is a multibody analysis code. 
# http://www.mbdyn.org
# 
# Copyright (C) 1996-2008
# 
# Pierangelo Masarati	<masarati@aero.polimi.it>
# Paolo Mantegazza	<mantegazza@aero.polimi.it>
# 
# Dipartimento di Ingegneria Aerospaziale - Politecnico di Milano
# via La Masa, 34 - 20156 Milano, Italy
# http://www.aero.polimi.it
# 
# Changing this copyright notice is forbidden.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation (version 2 of the License).
# 
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
# 
# File modified by Andrea Zanoni <andrea.zanoni@polimi.it>
# and distributed with mbdyn-blender add-on.
# https://github.com/zanoni-mbdyn/mbdyn-blender/

# 1 degree of freedom slider crank model:
#
#  f   +---+      l         c  |/
# ---> | o-|-------------o-----o/
#      +---+                   |/

begin: data;
	problem: initial value;
end: data;

begin: initial value;
	initial time: 0.;
	final time: 10.;
	# time step: 1e-2;
	time step: 1e-3;

	tolerance: 1e-6;
	max iterations: 10;

	# method: bdf;
	method: ms, .6;

	# notes:
	#	ms, .6 && 1e-2 does not work
	#	bdf & 1e-2 works with large numerical dissipation
	#	ms, .6 && 1e-3 works with minimal dissipation

	nonlinear solver: newton raphson, modified, 5;
	linear solver: naive, colamd;

	# output: iterations;
	# output: residual;
	# output: solution;
end: initial value;

begin: control data;
	structural nodes:
		+1		# ground
		+1		# crank
		+1		# link
		+1		# slider
	;
	rigid bodies:
		+1		# crank
		+1		# link
		+1		# slider
	;
	joints:
		+1		# ground clamp
		+1		# crank pin
		+1		# link/crank hinge
		+1		# link/slider hinge
		+1		# slider
	;
	forces:
		+1		# crank torque
		+1		# slider load
	;

	output results: netcdf, no text;
	default orientation: orientation vector;
	print: all;
end: control data;

set: integer NODE_GROUND = 0;
set: integer NODE_CRANK = 100;
set: integer NODE_LINK = 200;
set: integer NODE_SLIDER = 300;

set: integer CRANK_PIN = 101;
set: integer CRANK_LINK_HINGE = 151;
set: integer SLIDER_LINK_HINGE = 251;
set: integer SLIDER_JOINT = 301;

# geometry
set: real A = .019;		# m, crank length
set: real B = .076;		# m, link length
set: real C = .052;		# m, distance of link COM from piston pin

# physical properties
set: real J_CRANK = 427.9e-6;
set: real J_LINK = 34.7e-6;
set: real M_CRANK = 0.779;
set: real M_LINK = 0.076;
set: real M_SLIDER = 0.078;

# compute C \ Omega ~ 2*pi*5 radian/s based on J (neglecting other inertia)
set: real C_CRANK = J_CRANK/2*(2*pi*5)^2;

# assembly: maximum extension (parametric; define as you like)
set: real CRANK_ANGLE = pi;
# set: real CRANK_ANGLE = pi/3;

# "closure" equation:
# A*cos(CRANK_ANGLE) - B*cos(LINK_ANGLE) = x
# A*sin(CRANK_ANGLE) - B*sin(LINK_ANGLE) = 0

set: real sin_LINK_ANGLE = A/B*sin(CRANK_ANGLE);
set: real cos_LINK_ANGLE = sqrt(1. - sin_LINK_ANGLE^2);

set: integer NODE_GROUND_REF = 5000;
set: integer NODE_CRANK_REF = 5005;
set: integer NODE_LINK_REF = 5010;
set: integer NODE_SLIDER_REF = 5015;
set: integer BODY_LINK_REF = 5020;

# location of ground node (origin)
reference: NODE_GROUND_REF,
	reference, global, null,
	reference, global, eye,
	reference, global, null,
	reference, global, null;

# location of crank pin (in the origin, arbitrary)
reference: CRANK_PIN,
	reference, NODE_GROUND_REF, null,
	reference, NODE_GROUND_REF, eye,
	reference, NODE_GROUND_REF, null,
	reference, NODE_GROUND_REF, null;

# location of hinge between crank and link (at assembly angle, arbitrary)
reference: CRANK_LINK_HINGE,
	reference, CRANK_PIN, cos(CRANK_ANGLE)*A, sin(CRANK_ANGLE)*A, 0.,
	reference, CRANK_PIN, eye,
	reference, CRANK_PIN, null,
	reference, CRANK_PIN, null;

# location of slider (y == 0, x depending on assembly, pre-computed)
reference: SLIDER_LINK_HINGE,
	reference, CRANK_PIN, cos(CRANK_ANGLE)*A - B*cos_LINK_ANGLE, 0., 0.,
	reference, CRANK_PIN, eye,
	reference, CRANK_PIN, null,
	reference, CRANK_PIN, null;

# location of slider joint (coincident with slider/link hinge)
reference: SLIDER_JOINT,
	reference, SLIDER_LINK_HINGE, null,
	reference, SLIDER_LINK_HINGE, eye,
	reference, SLIDER_LINK_HINGE, null,
	reference, SLIDER_LINK_HINGE, null;

# location of crank midpoint
reference: NODE_CRANK_REF,
	reference, CRANK_PIN, A/2*cos(CRANK_ANGLE), A/2*sin(CRANK_ANGLE), 0.,
	reference, CRANK_PIN,
		1, cos(CRANK_ANGLE), sin(CRANK_ANGLE), 0.,
		3, 0., 0., 1.,
	reference, CRANK_PIN, null,
	reference, CRANK_PIN, null;

# location of link midpoint
reference: NODE_LINK_REF,
	reference, SLIDER_JOINT, B/2*cos_LINK_ANGLE, B/2*sin_LINK_ANGLE, 0.,
	reference, SLIDER_JOINT,
		1, cos_LINK_ANGLE, sin_LINK_ANGLE, 0.,
		3, 0., 0., 1.,
	reference, SLIDER_JOINT, null,
	reference, SLIDER_JOINT, null;

# location of link COM
reference: BODY_LINK_REF,
	reference, SLIDER_JOINT, C*cos_LINK_ANGLE, C*sin_LINK_ANGLE, 0.,
	reference, SLIDER_JOINT,
		1, cos_LINK_ANGLE, sin_LINK_ANGLE, 0.,
		3, 0., 0., 1.,
	reference, SLIDER_JOINT, null,
	reference, SLIDER_JOINT, null;

# location of slider
reference: NODE_SLIDER_REF,
	reference, SLIDER_JOINT, null,
	reference, SLIDER_JOINT, eye,
	reference, SLIDER_JOINT, null,
	reference, SLIDER_JOINT, null;

begin: nodes;
	# ground
	structural: NODE_GROUND, static,
		reference, NODE_GROUND_REF, null,
		reference, NODE_GROUND_REF, eye,
		reference, NODE_GROUND_REF, null,
		reference, NODE_GROUND_REF, null;

	# crank; reference defined earlier
	structural: NODE_CRANK, dynamic,
		reference, NODE_CRANK_REF, null,
		reference, NODE_CRANK_REF, eye,
		reference, NODE_CRANK_REF, null,
		reference, NODE_CRANK_REF, null;

	# crank; reference defined earlier
	structural: NODE_LINK, dynamic,
		reference, NODE_LINK_REF, null,
		reference, NODE_LINK_REF, eye,
		reference, NODE_LINK_REF, null,
		reference, NODE_LINK_REF, null;

	# crank; reference defined earlier
	structural: NODE_SLIDER, dynamic,
		reference, NODE_SLIDER_REF, null,
		reference, NODE_SLIDER_REF, eye,
		reference, NODE_SLIDER_REF, null,
		reference, NODE_SLIDER_REF, null;
end: nodes;

set: integer BODY_CRANK = 300;
set: integer BODY_LINK = 305;
set: integer BODY_SLIDER = 310;

begin: elements;
	body: BODY_CRANK, NODE_CRANK,
		# crank mass (does not matter in simplest case, since CM is in the hinge)
		M_CRANK,
		# the CM is in the pin, not in the node
		reference, CRANK_PIN, null,
		# inertia does matter only about axis 3!
		diag,
			1.e+0, 1.e+0, J_CRANK;

	body: BODY_LINK, NODE_LINK,
		M_LINK,
		reference, NODE_LINK_REF, null,	  # may need to be offset
		diag,
			1.e+0, 1.e+0, J_LINK;

	body: BODY_SLIDER, NODE_SLIDER,
		M_SLIDER,
		null,
		eye;

	set: integer JOINT_CLAMP_GROUND = 800;
	set: integer JOINT_CRANK_LINK_HINGE = 805;
	set: integer JOINT_SLIDER_LINK_HINGE = 810;
	set: integer JOINT_GROUND_SLIDER = 815;

	# ground clamp
	joint: JOINT_CLAMP_GROUND, clamp, NODE_GROUND, node, node;

	joint: CRANK_PIN, revolute hinge,
		NODE_GROUND,
			position, reference, CRANK_PIN, null,
			orientation, reference, CRANK_PIN, eye,
		NODE_CRANK,
			position, reference, CRANK_PIN, null,
			orientation, reference, CRANK_PIN, eye;

	joint: JOINT_CRANK_LINK_HINGE, revolute hinge,
		NODE_CRANK,
			position, reference, CRANK_LINK_HINGE, null,
			orientation, reference, CRANK_LINK_HINGE, eye,
		NODE_LINK,
			position, reference, CRANK_LINK_HINGE, null,
			orientation, reference, CRANK_LINK_HINGE, eye;

	joint: JOINT_SLIDER_LINK_HINGE, revolute hinge,
		NODE_LINK,
			position, reference, SLIDER_LINK_HINGE, null,
			orientation, reference, SLIDER_LINK_HINGE, eye,
		NODE_SLIDER,
			position, reference, SLIDER_LINK_HINGE, null,
			orientation, reference, SLIDER_LINK_HINGE, eye;

	joint: JOINT_GROUND_SLIDER, total joint,
		NODE_GROUND,
			position, reference, SLIDER_LINK_HINGE, null,
			position orientation, reference, SLIDER_LINK_HINGE, eye,
			rotation orientation, reference, SLIDER_LINK_HINGE, eye,
		NODE_SLIDER, 
			position, reference, SLIDER_LINK_HINGE, null,
			position orientation, reference, SLIDER_LINK_HINGE, eye,
			rotation orientation, reference, SLIDER_LINK_HINGE, eye,
		position constraint,
			inactive, active, inactive,
				null,
		orientation constraint,
			inactive, inactive, active,
				null;

	set: integer COUPLE_CRANK = 10000;
	set: integer FORCE_SLIDER = 10005;

	couple: COUPLE_CRANK, absolute,
		NODE_CRANK,
			position, reference, node, null,
		0., 0., 1.,
			sine, 0., 2*pi/.2, C_CRANK, one, 0.;

	# load on piston; may depend on configuration (e.g. compress a fluid?)
	force: FORCE_SLIDER, absolute,
		NODE_SLIDER,
			position, reference, node, null,
		1., 0., 0.,
			# sine, 1., 2.*pi/.2, 1., forever, 0.;
			0.;
			# const, 1.e-2;
			# string, "2.e-1*(model::distance(NODE_SLIDER, NODE_GROUND) -.8)*(model::xvelocity(NODE_SLIDER) < 0)";

	inertia: BODY_CRANK, body, BODY_CRANK;
	inertia: BODY_LINK, body, BODY_LINK;
end: elements;

# vim:ft=mbd
